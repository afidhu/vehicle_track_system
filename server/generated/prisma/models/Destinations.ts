
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Destinations` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Destinations
 * 
 */
export type DestinationsModel = runtime.Types.Result.DefaultSelection<Prisma.$DestinationsPayload>

export type AggregateDestinations = {
  _count: DestinationsCountAggregateOutputType | null
  _avg: DestinationsAvgAggregateOutputType | null
  _sum: DestinationsSumAggregateOutputType | null
  _min: DestinationsMinAggregateOutputType | null
  _max: DestinationsMaxAggregateOutputType | null
}

export type DestinationsAvgAggregateOutputType = {
  destination_id: number | null
}

export type DestinationsSumAggregateOutputType = {
  destination_id: number | null
}

export type DestinationsMinAggregateOutputType = {
  destination_id: number | null
  place: string | null
  latitude: string | null
  longitude: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type DestinationsMaxAggregateOutputType = {
  destination_id: number | null
  place: string | null
  latitude: string | null
  longitude: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type DestinationsCountAggregateOutputType = {
  destination_id: number
  place: number
  latitude: number
  longitude: number
  created_at: number
  updated_at: number
  _all: number
}


export type DestinationsAvgAggregateInputType = {
  destination_id?: true
}

export type DestinationsSumAggregateInputType = {
  destination_id?: true
}

export type DestinationsMinAggregateInputType = {
  destination_id?: true
  place?: true
  latitude?: true
  longitude?: true
  created_at?: true
  updated_at?: true
}

export type DestinationsMaxAggregateInputType = {
  destination_id?: true
  place?: true
  latitude?: true
  longitude?: true
  created_at?: true
  updated_at?: true
}

export type DestinationsCountAggregateInputType = {
  destination_id?: true
  place?: true
  latitude?: true
  longitude?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type DestinationsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Destinations to aggregate.
   */
  where?: Prisma.DestinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Destinations to fetch.
   */
  orderBy?: Prisma.DestinationsOrderByWithRelationInput | Prisma.DestinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DestinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Destinations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Destinations
  **/
  _count?: true | DestinationsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DestinationsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DestinationsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DestinationsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DestinationsMaxAggregateInputType
}

export type GetDestinationsAggregateType<T extends DestinationsAggregateArgs> = {
      [P in keyof T & keyof AggregateDestinations]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDestinations[P]>
    : Prisma.GetScalarType<T[P], AggregateDestinations[P]>
}




export type DestinationsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DestinationsWhereInput
  orderBy?: Prisma.DestinationsOrderByWithAggregationInput | Prisma.DestinationsOrderByWithAggregationInput[]
  by: Prisma.DestinationsScalarFieldEnum[] | Prisma.DestinationsScalarFieldEnum
  having?: Prisma.DestinationsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DestinationsCountAggregateInputType | true
  _avg?: DestinationsAvgAggregateInputType
  _sum?: DestinationsSumAggregateInputType
  _min?: DestinationsMinAggregateInputType
  _max?: DestinationsMaxAggregateInputType
}

export type DestinationsGroupByOutputType = {
  destination_id: number
  place: string
  latitude: string
  longitude: string
  created_at: Date
  updated_at: Date
  _count: DestinationsCountAggregateOutputType | null
  _avg: DestinationsAvgAggregateOutputType | null
  _sum: DestinationsSumAggregateOutputType | null
  _min: DestinationsMinAggregateOutputType | null
  _max: DestinationsMaxAggregateOutputType | null
}

type GetDestinationsGroupByPayload<T extends DestinationsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DestinationsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DestinationsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DestinationsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DestinationsGroupByOutputType[P]>
      }
    >
  >



export type DestinationsWhereInput = {
  AND?: Prisma.DestinationsWhereInput | Prisma.DestinationsWhereInput[]
  OR?: Prisma.DestinationsWhereInput[]
  NOT?: Prisma.DestinationsWhereInput | Prisma.DestinationsWhereInput[]
  destination_id?: Prisma.IntFilter<"Destinations"> | number
  place?: Prisma.StringFilter<"Destinations"> | string
  latitude?: Prisma.StringFilter<"Destinations"> | string
  longitude?: Prisma.StringFilter<"Destinations"> | string
  created_at?: Prisma.DateTimeFilter<"Destinations"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Destinations"> | Date | string
}

export type DestinationsOrderByWithRelationInput = {
  destination_id?: Prisma.SortOrder
  place?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type DestinationsWhereUniqueInput = Prisma.AtLeast<{
  destination_id?: number
  AND?: Prisma.DestinationsWhereInput | Prisma.DestinationsWhereInput[]
  OR?: Prisma.DestinationsWhereInput[]
  NOT?: Prisma.DestinationsWhereInput | Prisma.DestinationsWhereInput[]
  place?: Prisma.StringFilter<"Destinations"> | string
  latitude?: Prisma.StringFilter<"Destinations"> | string
  longitude?: Prisma.StringFilter<"Destinations"> | string
  created_at?: Prisma.DateTimeFilter<"Destinations"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"Destinations"> | Date | string
}, "destination_id">

export type DestinationsOrderByWithAggregationInput = {
  destination_id?: Prisma.SortOrder
  place?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.DestinationsCountOrderByAggregateInput
  _avg?: Prisma.DestinationsAvgOrderByAggregateInput
  _max?: Prisma.DestinationsMaxOrderByAggregateInput
  _min?: Prisma.DestinationsMinOrderByAggregateInput
  _sum?: Prisma.DestinationsSumOrderByAggregateInput
}

export type DestinationsScalarWhereWithAggregatesInput = {
  AND?: Prisma.DestinationsScalarWhereWithAggregatesInput | Prisma.DestinationsScalarWhereWithAggregatesInput[]
  OR?: Prisma.DestinationsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DestinationsScalarWhereWithAggregatesInput | Prisma.DestinationsScalarWhereWithAggregatesInput[]
  destination_id?: Prisma.IntWithAggregatesFilter<"Destinations"> | number
  place?: Prisma.StringWithAggregatesFilter<"Destinations"> | string
  latitude?: Prisma.StringWithAggregatesFilter<"Destinations"> | string
  longitude?: Prisma.StringWithAggregatesFilter<"Destinations"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"Destinations"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"Destinations"> | Date | string
}

export type DestinationsCreateInput = {
  place: string
  latitude: string
  longitude: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DestinationsUncheckedCreateInput = {
  destination_id?: number
  place: string
  latitude: string
  longitude: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DestinationsUpdateInput = {
  place?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.StringFieldUpdateOperationsInput | string
  longitude?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DestinationsUncheckedUpdateInput = {
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  place?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.StringFieldUpdateOperationsInput | string
  longitude?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DestinationsCreateManyInput = {
  destination_id?: number
  place: string
  latitude: string
  longitude: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type DestinationsUpdateManyMutationInput = {
  place?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.StringFieldUpdateOperationsInput | string
  longitude?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DestinationsUncheckedUpdateManyInput = {
  destination_id?: Prisma.IntFieldUpdateOperationsInput | number
  place?: Prisma.StringFieldUpdateOperationsInput | string
  latitude?: Prisma.StringFieldUpdateOperationsInput | string
  longitude?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DestinationsCountOrderByAggregateInput = {
  destination_id?: Prisma.SortOrder
  place?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type DestinationsAvgOrderByAggregateInput = {
  destination_id?: Prisma.SortOrder
}

export type DestinationsMaxOrderByAggregateInput = {
  destination_id?: Prisma.SortOrder
  place?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type DestinationsMinOrderByAggregateInput = {
  destination_id?: Prisma.SortOrder
  place?: Prisma.SortOrder
  latitude?: Prisma.SortOrder
  longitude?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type DestinationsSumOrderByAggregateInput = {
  destination_id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type DestinationsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  destination_id?: boolean
  place?: boolean
  latitude?: boolean
  longitude?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["destinations"]>

export type DestinationsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  destination_id?: boolean
  place?: boolean
  latitude?: boolean
  longitude?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["destinations"]>

export type DestinationsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  destination_id?: boolean
  place?: boolean
  latitude?: boolean
  longitude?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["destinations"]>

export type DestinationsSelectScalar = {
  destination_id?: boolean
  place?: boolean
  latitude?: boolean
  longitude?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type DestinationsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"destination_id" | "place" | "latitude" | "longitude" | "created_at" | "updated_at", ExtArgs["result"]["destinations"]>

export type $DestinationsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Destinations"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    destination_id: number
    place: string
    latitude: string
    longitude: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["destinations"]>
  composites: {}
}

export type DestinationsGetPayload<S extends boolean | null | undefined | DestinationsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DestinationsPayload, S>

export type DestinationsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DestinationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DestinationsCountAggregateInputType | true
  }

export interface DestinationsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Destinations'], meta: { name: 'Destinations' } }
  /**
   * Find zero or one Destinations that matches the filter.
   * @param {DestinationsFindUniqueArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DestinationsFindUniqueArgs>(args: Prisma.SelectSubset<T, DestinationsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Destinations that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DestinationsFindUniqueOrThrowArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DestinationsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DestinationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Destinations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsFindFirstArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DestinationsFindFirstArgs>(args?: Prisma.SelectSubset<T, DestinationsFindFirstArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Destinations that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsFindFirstOrThrowArgs} args - Arguments to find a Destinations
   * @example
   * // Get one Destinations
   * const destinations = await prisma.destinations.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DestinationsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DestinationsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Destinations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Destinations
   * const destinations = await prisma.destinations.findMany()
   * 
   * // Get first 10 Destinations
   * const destinations = await prisma.destinations.findMany({ take: 10 })
   * 
   * // Only select the `destination_id`
   * const destinationsWithDestination_idOnly = await prisma.destinations.findMany({ select: { destination_id: true } })
   * 
   */
  findMany<T extends DestinationsFindManyArgs>(args?: Prisma.SelectSubset<T, DestinationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Destinations.
   * @param {DestinationsCreateArgs} args - Arguments to create a Destinations.
   * @example
   * // Create one Destinations
   * const Destinations = await prisma.destinations.create({
   *   data: {
   *     // ... data to create a Destinations
   *   }
   * })
   * 
   */
  create<T extends DestinationsCreateArgs>(args: Prisma.SelectSubset<T, DestinationsCreateArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Destinations.
   * @param {DestinationsCreateManyArgs} args - Arguments to create many Destinations.
   * @example
   * // Create many Destinations
   * const destinations = await prisma.destinations.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DestinationsCreateManyArgs>(args?: Prisma.SelectSubset<T, DestinationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Destinations and returns the data saved in the database.
   * @param {DestinationsCreateManyAndReturnArgs} args - Arguments to create many Destinations.
   * @example
   * // Create many Destinations
   * const destinations = await prisma.destinations.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Destinations and only return the `destination_id`
   * const destinationsWithDestination_idOnly = await prisma.destinations.createManyAndReturn({
   *   select: { destination_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DestinationsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DestinationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Destinations.
   * @param {DestinationsDeleteArgs} args - Arguments to delete one Destinations.
   * @example
   * // Delete one Destinations
   * const Destinations = await prisma.destinations.delete({
   *   where: {
   *     // ... filter to delete one Destinations
   *   }
   * })
   * 
   */
  delete<T extends DestinationsDeleteArgs>(args: Prisma.SelectSubset<T, DestinationsDeleteArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Destinations.
   * @param {DestinationsUpdateArgs} args - Arguments to update one Destinations.
   * @example
   * // Update one Destinations
   * const destinations = await prisma.destinations.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DestinationsUpdateArgs>(args: Prisma.SelectSubset<T, DestinationsUpdateArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Destinations.
   * @param {DestinationsDeleteManyArgs} args - Arguments to filter Destinations to delete.
   * @example
   * // Delete a few Destinations
   * const { count } = await prisma.destinations.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DestinationsDeleteManyArgs>(args?: Prisma.SelectSubset<T, DestinationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Destinations
   * const destinations = await prisma.destinations.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DestinationsUpdateManyArgs>(args: Prisma.SelectSubset<T, DestinationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Destinations and returns the data updated in the database.
   * @param {DestinationsUpdateManyAndReturnArgs} args - Arguments to update many Destinations.
   * @example
   * // Update many Destinations
   * const destinations = await prisma.destinations.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Destinations and only return the `destination_id`
   * const destinationsWithDestination_idOnly = await prisma.destinations.updateManyAndReturn({
   *   select: { destination_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DestinationsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DestinationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Destinations.
   * @param {DestinationsUpsertArgs} args - Arguments to update or create a Destinations.
   * @example
   * // Update or create a Destinations
   * const destinations = await prisma.destinations.upsert({
   *   create: {
   *     // ... data to create a Destinations
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Destinations we want to update
   *   }
   * })
   */
  upsert<T extends DestinationsUpsertArgs>(args: Prisma.SelectSubset<T, DestinationsUpsertArgs<ExtArgs>>): Prisma.Prisma__DestinationsClient<runtime.Types.Result.GetResult<Prisma.$DestinationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsCountArgs} args - Arguments to filter Destinations to count.
   * @example
   * // Count the number of Destinations
   * const count = await prisma.destinations.count({
   *   where: {
   *     // ... the filter for the Destinations we want to count
   *   }
   * })
  **/
  count<T extends DestinationsCountArgs>(
    args?: Prisma.Subset<T, DestinationsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DestinationsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DestinationsAggregateArgs>(args: Prisma.Subset<T, DestinationsAggregateArgs>): Prisma.PrismaPromise<GetDestinationsAggregateType<T>>

  /**
   * Group by Destinations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DestinationsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DestinationsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DestinationsGroupByArgs['orderBy'] }
      : { orderBy?: DestinationsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DestinationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDestinationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Destinations model
 */
readonly fields: DestinationsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Destinations.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DestinationsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Destinations model
 */
export interface DestinationsFieldRefs {
  readonly destination_id: Prisma.FieldRef<"Destinations", 'Int'>
  readonly place: Prisma.FieldRef<"Destinations", 'String'>
  readonly latitude: Prisma.FieldRef<"Destinations", 'String'>
  readonly longitude: Prisma.FieldRef<"Destinations", 'String'>
  readonly created_at: Prisma.FieldRef<"Destinations", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"Destinations", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Destinations findUnique
 */
export type DestinationsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * Filter, which Destinations to fetch.
   */
  where: Prisma.DestinationsWhereUniqueInput
}

/**
 * Destinations findUniqueOrThrow
 */
export type DestinationsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * Filter, which Destinations to fetch.
   */
  where: Prisma.DestinationsWhereUniqueInput
}

/**
 * Destinations findFirst
 */
export type DestinationsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * Filter, which Destinations to fetch.
   */
  where?: Prisma.DestinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Destinations to fetch.
   */
  orderBy?: Prisma.DestinationsOrderByWithRelationInput | Prisma.DestinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Destinations.
   */
  cursor?: Prisma.DestinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Destinations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Destinations.
   */
  distinct?: Prisma.DestinationsScalarFieldEnum | Prisma.DestinationsScalarFieldEnum[]
}

/**
 * Destinations findFirstOrThrow
 */
export type DestinationsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * Filter, which Destinations to fetch.
   */
  where?: Prisma.DestinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Destinations to fetch.
   */
  orderBy?: Prisma.DestinationsOrderByWithRelationInput | Prisma.DestinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Destinations.
   */
  cursor?: Prisma.DestinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Destinations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Destinations.
   */
  distinct?: Prisma.DestinationsScalarFieldEnum | Prisma.DestinationsScalarFieldEnum[]
}

/**
 * Destinations findMany
 */
export type DestinationsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * Filter, which Destinations to fetch.
   */
  where?: Prisma.DestinationsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Destinations to fetch.
   */
  orderBy?: Prisma.DestinationsOrderByWithRelationInput | Prisma.DestinationsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Destinations.
   */
  cursor?: Prisma.DestinationsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Destinations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Destinations.
   */
  skip?: number
  distinct?: Prisma.DestinationsScalarFieldEnum | Prisma.DestinationsScalarFieldEnum[]
}

/**
 * Destinations create
 */
export type DestinationsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * The data needed to create a Destinations.
   */
  data: Prisma.XOR<Prisma.DestinationsCreateInput, Prisma.DestinationsUncheckedCreateInput>
}

/**
 * Destinations createMany
 */
export type DestinationsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Destinations.
   */
  data: Prisma.DestinationsCreateManyInput | Prisma.DestinationsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Destinations createManyAndReturn
 */
export type DestinationsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * The data used to create many Destinations.
   */
  data: Prisma.DestinationsCreateManyInput | Prisma.DestinationsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Destinations update
 */
export type DestinationsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * The data needed to update a Destinations.
   */
  data: Prisma.XOR<Prisma.DestinationsUpdateInput, Prisma.DestinationsUncheckedUpdateInput>
  /**
   * Choose, which Destinations to update.
   */
  where: Prisma.DestinationsWhereUniqueInput
}

/**
 * Destinations updateMany
 */
export type DestinationsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Destinations.
   */
  data: Prisma.XOR<Prisma.DestinationsUpdateManyMutationInput, Prisma.DestinationsUncheckedUpdateManyInput>
  /**
   * Filter which Destinations to update
   */
  where?: Prisma.DestinationsWhereInput
  /**
   * Limit how many Destinations to update.
   */
  limit?: number
}

/**
 * Destinations updateManyAndReturn
 */
export type DestinationsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * The data used to update Destinations.
   */
  data: Prisma.XOR<Prisma.DestinationsUpdateManyMutationInput, Prisma.DestinationsUncheckedUpdateManyInput>
  /**
   * Filter which Destinations to update
   */
  where?: Prisma.DestinationsWhereInput
  /**
   * Limit how many Destinations to update.
   */
  limit?: number
}

/**
 * Destinations upsert
 */
export type DestinationsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * The filter to search for the Destinations to update in case it exists.
   */
  where: Prisma.DestinationsWhereUniqueInput
  /**
   * In case the Destinations found by the `where` argument doesn't exist, create a new Destinations with this data.
   */
  create: Prisma.XOR<Prisma.DestinationsCreateInput, Prisma.DestinationsUncheckedCreateInput>
  /**
   * In case the Destinations was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DestinationsUpdateInput, Prisma.DestinationsUncheckedUpdateInput>
}

/**
 * Destinations delete
 */
export type DestinationsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
  /**
   * Filter which Destinations to delete.
   */
  where: Prisma.DestinationsWhereUniqueInput
}

/**
 * Destinations deleteMany
 */
export type DestinationsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Destinations to delete
   */
  where?: Prisma.DestinationsWhereInput
  /**
   * Limit how many Destinations to delete.
   */
  limit?: number
}

/**
 * Destinations without action
 */
export type DestinationsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Destinations
   */
  select?: Prisma.DestinationsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Destinations
   */
  omit?: Prisma.DestinationsOmit<ExtArgs> | null
}
